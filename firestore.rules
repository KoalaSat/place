rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /pixels/{pixelID} {
      allow create: if request.auth != null &&
        createWithRequiredFields(['pixel', 'previousPixels', 'createdAt', 'lastUpdated']) &&
        request.resource.data.pixel == 0 &&
        (request.resource.data.previousPixels is list && request.resource.data.previousPixels.size() == 0) &&
        (request.resource.data.createdAt is timestamp && request.resource.data.createdAt == request.time) &&
        (request.resource.data.lastUpdated is timestamp && request.resource.data.lastUpdated == request.time);
    }

    match /users/{userID} {
      allow create: if request.auth != null &&
        createWithRequiredFields(['pixel', 'createdAt']) &&
        (request.resource.data.pixel is string && exists(/databases/$(database)/documents/pixels/$(request.resource.data.pixel))) &&
        (request.resource.data.createdAt is timestamp && request.resource.data.createdAt == request.time);
    }

    function createWithRequiredFields (requiredFields) {
        return request.resource.data.keys().hasAll(requiredFields) &&
          request.resource.data.keys().hasOnly(requiredFields);
    }
  }
}